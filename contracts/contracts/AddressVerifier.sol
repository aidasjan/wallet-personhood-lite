// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract AddressVerifier {
    address public immutable trustedSigner;
    mapping(address => bool) public isVerified;

    constructor(address _trustedSigner) {
        trustedSigner = _trustedSigner;
    }

    /// @notice Submit a signature that proves the trusted signer verified an address
    /// @param signature The signature generated by the trusted signer
    function submitVerification(bytes memory signature) external {
        require(!isVerified[msg.sender], "Address already verified");

        // Recover the signer of the message
        bytes32 hash = getEthSignedMessageHash(msg.sender);
        address recovered = recoverSigner(hash, signature);

        require(recovered == trustedSigner, "Invalid signature");

        isVerified[msg.sender] = true;
    }

    /// @notice Check if an address is verified
    /// @param addr The address to check
    function checkVerified(address addr) external view returns (bool) {
        return isVerified[addr];
    }

    /// @dev EIP-191 compliant message prefix
    function getEthSignedMessageHash(address addr) internal pure returns (bytes32) {
        bytes32 messageHash = keccak256(abi.encodePacked(addr));
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", messageHash));
    }

    /// @dev Recover signer address from the signature
    function recoverSigner(bytes32 ethSignedMessageHash, bytes memory signature) internal pure returns (address) {
        require(signature.length == 65, "Invalid signature length");

        bytes32 r;
        bytes32 s;
        uint8 v;

        // Decode signature
        assembly {
            r := mload(add(signature, 32))
            s := mload(add(signature, 64))
            v := byte(0, mload(add(signature, 96)))
        }

        // Old-style support
        if (v < 27) {
            v += 27;
        }

        return ecrecover(ethSignedMessageHash, v, r, s);
    }
}
